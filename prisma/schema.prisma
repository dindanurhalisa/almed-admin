// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id           String        @id @default(uuid())
  name         String
  userId       String
  banners      Banner[]      @relation("StoreToBanner")
  categories   Category[]    @relation("StoreToCategory")
  product      Product[]     @relation("StoreToProduct")
  transactions Transaction[] @relation("StoreToTransaction")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Banner {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBanner", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  bannerId  String
  banner    Banner    @relation(fields: [bannerId], references: [id])
  products  Product[] @relation("CategoryToProduct")
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
  @@index([bannerId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String      @default("")
  stock       Int         @default(0)
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @unique @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum PaymentMethod {
  COD
  WHATSAPP
}

model Transaction {
  id            String        @id @default(uuid())
  storeId       String
  store         Store         @relation("StoreToTransaction", fields: [storeId], references: [id])
  orderItems    OrderItem[]   @relation("TransactionToOrderItem")
  userId        String        @default("")
  name          String
  phone         String
  address       String
  postCode      String
  paymentMethod PaymentMethod
  isPaid        Boolean       @default(false)
  totalAmount   Decimal
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([storeId])
}

model OrderItem {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation("TransactionToOrderItem", fields: [transactionId], references: [id], onDelete: Cascade)
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  quantity      Int
  price         Decimal // Price at the time of purchase
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([transactionId])
  @@index([productId])
}
